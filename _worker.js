import{connect}from'cloudflare:sockets';const d=new TextDecoder(),e=new TextEncoder(),i='123123',u='26687cd8-fcb8-4189-974c-7513f08fe875',p=['1.1.1.1'],r='sjc.o00o.ooo',n='kb';const U=((h,a=new Uint8Array(16))=>{for(let i=0;i<32;i+=2)a[i>>1]=parseInt(h.substr(i,2),16);return a})(u.replace(/-/g,''));const c=b=>{for(let i=0;i<16;i++)if(b[i]!==U[i])return 0;return 1};const t=async(h,o,a)=>{try{const s=await connect({hostname:h,port:o});await s.opened;return {tcpSocket:s,initialData:a}}catch{}if(r){const[RH,RP]=r.split(':');return t(RH,+RP||o,a)}throw new Error('连接失败')};const v=async b=>{b=new Uint8Array(b);let off=19+b[17],P=(b[off]<<8)|b[off+1],type=b[off+2],idx=off+3,H='',i;switch(type){case 1:i=idx;H=`${b[i++]}.${b[i++]}.${b[i++]}.${b[i++]}`;idx=i;break;case 2:{const l=b[idx++];H=d.decode(b.subarray(idx,idx+l));idx+=l}break;case 3: {let arr=[];for(let k=0;k<8;k++)arr.push(((b[idx+2*k]<<8)|b[idx+2*k+1]).toString(16));H=arr.join(':');idx+=16}break;default:throw new Error('未知地址类型')}return t(H,P,b.slice(idx))};const m=(w,s,a)=>{const writer=s.writable.getWriter();try{w.send(new Uint8Array([0,0]))}catch{}if(a)try{writer.write(a)}catch{}let bufQ=[],timer,closed=0,flush=()=>{if(closed)return;const toWrite=bufQ.length===1?bufQ[0]:(()=>{let L=0;bufQ.forEach(x=>L+=x.length);const out=new Uint8Array(L);let pos=0;bufQ.forEach(x=>{out.set(x,pos);pos+=x.length});return out})();writer.write(toWrite).catch(()=>{});bufQ.length=0;timer=null};const shutdown=()=>{if(closed)return;closed=1;try{writer.releaseLock()}catch{}try{s.close()}catch{}try{w.close()}catch{}bufQ=null;if(timer)clearTimeout(timer)};w.onmessage=({data})=>{if(closed)return;const chunk=data instanceof ArrayBuffer?new Uint8Array(data):e.encode(data);bufQ.push(chunk);if(!timer)timer=setTimeout(()=>{if(closed)return;flush()},5)};s.readable.pipeTo(new WritableStream({write(c){try{w.send(c)}catch{}},close:shutdown,abort:shutdown})).catch(shutdown);w.onclose=shutdown};const f=h=>{const make=(a,tag=n)=>{const [H,P=443]=a.split(':');return`vless://${u}@${H}:${P}?encryption=none&security=tls&type=ws&host=${h}&sni=${h}&path=%2F%3Fed%3D2560#${encodeURIComponent(tag)}`}return p.map(a=>{const[k,tag]=a.split('#');return make(k,tag)}).join('\n')+'\n'+make(h)};export default{async fetch(req,env){const headers=req.headers,host=headers.get('Host');if(headers.get('Upgrade')!=='websocket'){const{pathname}=new URL(req.url);return new Response(pathname===`/${i}`?`订阅地址: https://${host}/${i}/vless`:pathname===`/${i}/vless`?f(host):'Hello Worker!')}try{const proto=headers.get('sec-websocket-protocol');if(!proto)throw new Error('no proto');const bin=atob(proto.replace(/-/g,'+').replace(/_/g,'/'));const data=Uint8Array.from(bin,c=>c.charCodeAt(0));if(!c(data.subarray(1,17)))return new Response('无效UUID',{status:403});const conn=await v(data.buffer);const wsPair=Object.values(new WebSocketPair());if(!wsPair||wsPair.length<2)throw new Error('wspair');const [wc,ws]=wsPair;ws.accept();m(ws,conn.tcpSocket,conn.initialData);return new Response(null,{status:101,webSocket:wc})}catch(err){return new Response('连接失败: '+(err&&err.message||err),{status:502})}}}
